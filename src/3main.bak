#if defined(ESP32)
  #include <WiFiMulti.h>
  WiFiMulti wifiMulti;
  #define DEVICE "ESP32"
  #elif defined(ESP8266)
  #include <ESP8266WiFiMulti.h>
  ESP8266WiFiMulti wifiMulti;
  #define DEVICE "ESP8266"
  #endif
  
  #include <Arduino.h>
  #include <InfluxDbClient.h>
  #include <InfluxDbCloud.h>
  
  // WiFi AP SSID
  #define WIFI_SSID "Penguin Network_2,4G"
  // WiFi password
  #define WIFI_PASSWORD "bilangwowdulu"
  
  #define INFLUXDB_URL "https://us-east-1-1.aws.cloud2.influxdata.com"
  #define INFLUXDB_TOKEN "U-Sy7ToxYbhcqvcjoCPNwlpMlYvay0PgKH7GzgjciUjiMDUfuOQsXYo83rmuTiJa_ELsb9irdpTidAF99S5YpQ=="
  #define INFLUXDB_ORG "5192782596477b75"
  #define INFLUXDB_BUCKET "89ade82a2d784fcf"
  
  // Time zone info
  #define TZ_INFO "UTC+7"
  
  // Declare InfluxDB client instance with preconfigured InfluxCloud certificate
  InfluxDBClient client(INFLUXDB_URL, INFLUXDB_ORG, INFLUXDB_BUCKET, INFLUXDB_TOKEN, InfluxDbCloud2CACert);
  
  // Declare Data point
  Point sensor("wifi_status");
  
  void setup() {
    Serial.begin(9600);
  
    // Setup wifi
    WiFi.mode(WIFI_STA);
    wifiMulti.addAP(WIFI_SSID, WIFI_PASSWORD);
  
    Serial.print("Connecting to wifi");
    while (wifiMulti.run() != WL_CONNECTED) {
      Serial.print(".");
      delay(100);
    }
    Serial.println();
  
    // Accurate time is necessary for certificate validation and writing in batches
    // We use the NTP servers in your area as provided by: https://www.pool.ntp.org/zone/
    // Syncing progress and the time will be printed to Serial.
    timeSync(TZ_INFO, "pool.ntp.org", "time.google.com", "time.windows.com");
    time_t now = time(nullptr);
    if (now < 1000000000) { // Before year 2000
        Serial.println("Time synchronization failed!");
            while(1) delay(1000); // Halt if time sync failed
  }
  
  
    // Check server connection
    if (client.validateConnection()) {
      Serial.print("Connected to InfluxDB: ");
      Serial.println(client.getServerUrl());
    } else {
      Serial.print("InfluxDB connection failed: ");
      Serial.println(client.getLastErrorMessage());
    }

    // Add tags to the data point
    sensor.addTag("device", DEVICE);
    sensor.addTag("SSID", WiFi.SSID());
  }


void loop() {
    // Clear fields for reusing the point. Tags remain the same
    sensor.clearFields();
  
    // Check WiFi connection and reconnect if needed
    if (wifiMulti.run() != WL_CONNECTED) {  // Fixed typo here
      Serial.println("Wifi connection lost");
      delay(5000);  // Wait longer before retry
      return;  // Skip this loop iteration
    }
  
    // Store measured value
    sensor.addField("rssi", WiFi.RSSI());
  
    // Debug output
    Serial.print("Writing: ");
    Serial.println(sensor.toLineProtocol());
  
    // Write point with error handling
    if (!client.writePoint(sensor)) {
      Serial.print("InfluxDB write failed: ");
      Serial.println(client.getLastErrorMessage());
      
      // Additional debug for connection issues
      if (!client.validateConnection()) {
        Serial.println("Reconnecting to InfluxDB...");
        client.setConnectionParams(INFLUXDB_URL, INFLUXDB_ORG, INFLUXDB_BUCKET, INFLUXDB_TOKEN);
      }
    }
}